"use client";
import React, { useState, useRef } from "react";
import {
  FileText,
  Upload,
  X,
  FileIcon,
  CheckCircle,
  AlertCircle,
  Download,
  Printer,
} from "lucide-react";
import axios from "axios";
import { Button } from "@/components/ui/Button";
import jsPDF from "jspdf";

const LegalDocumenbluealyzer = () => {
  const [file, setFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const [analysis, sebluealysis] = useState(null);
  const [showModal, setShowModal] = useState(false);
  const [uploadStatus, setUploadStatus] = useState(null); // 'success', 'error', or null
  const analysisRef = useRef(null);

  // Handle file selection
  const handleFileChange = (event) => {
    const selectedFile = event.target.files[0];
    if (selectedFile) {
      setFile(selectedFile);
      setShowModal(true);
    }
  };

  // Upload and analyze file
  const analyzeDocument = async () => {
    if (!file) {
      setUploadStatus("error");
      return;
    }

    setIsUploading(true);
    setUploadStatus(null);
    const formData = new FormData();
    formData.append("file", file);

    try {
      const response = await axios.post(
        "http://127.0.0.1:8000/analyze",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const data = response.data;

      // Validate response
      if (!data.final_analysis || data.final_analysis.trim() === "") {
        throw new Error("No output generated by API");
      }

      // Set the analysis state with the API response
      sebluealysis(data);
      setUploadStatus("success");
      setTimeout(() => {
        setShowModal(false);
      }, 1000);
    } catch (error) {
      console.error("Error:", error);
      setUploadStatus("error");
    } finally {
      setIsUploading(false);
    }
  };

  const formatFileSize = (bytes) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  // Handle document download as PDF
  const handleDownload = () => {
    if (!analysis) return;

    // Create new PDF document
    const doc = new jsPDF();
    const fileName = file?.name.split(".")[0] || "document";
    const pageWidth = doc.internal.pageSize.getWidth();

    // Set metadata
    doc.setProperties({
      title: `Analysis of ${file?.name || "Legal Document"}`,
      creator: "Legal Document Analyzer",
      subject: "Legal Document Analysis",
    });

    // Add title
    doc.setFontSize(18);
    doc.setFont("helvetica", "bold");
    doc.text("Legal Document Analysis", pageWidth / 2, 20, { align: "center" });

    // Add document info
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    doc.text(`Document: ${file?.name || "Unnamed document"}`, 20, 35);
    doc.text(`Analysis Date: ${new Date().toLocaleDateString()}`, 20, 45);

    // Add summary section header
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Summary", 20, 60);

    // Add summary content
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    const summaryText = analysis.summary || "No summary available";
    const summaryLines = doc.splitTextToSize(summaryText, pageWidth - 40);
    doc.text(summaryLines, 20, 70);

    // Calculate where to start Plain-Language section
    let yPosition = 70 + summaryLines.length * 7;
    if (yPosition > 240) {
      doc.addPage();
      yPosition = 20;
    }

    // Add Plain-Language section header
    doc.setFontSize(14);
    doc.setFont("helvetica", "bold");
    doc.text("Plain-Language Explanation", 20, yPosition);

    // Add Plain-Language content
    doc.setFontSize(12);
    doc.setFont("helvetica", "normal");
    const analysisText = analysis.final_analysis || "No analysis available";
    const analysisLines = doc.splitTextToSize(analysisText, pageWidth - 40);
    doc.text(analysisLines, 20, yPosition + 10);

    // Add footer on each page
    const pageCount = doc.internal.getNumberOfPages();
    for (let i = 1; i <= pageCount; i++) {
      doc.setPage(i);
      doc.setFontSize(10);
      doc.setTextColor(100);
      doc.text(
        `Generated on ${new Date().toLocaleString()} - Page ${i} of ${pageCount}`,
        pageWidth / 2,
        doc.internal.pageSize.getHeight() - 10,
        { align: "center" }
      );
    }

    // Save the PDF
    doc.save(`analysis_${fileName}.pdf`);
  };

  // Handle document printing
  const handlePrint = () => {
    if (!analysis) return;

    // Create a new window for printing
    const printWindow = window.open("", "_blank");

    // Create the content to print
    const printContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <title>Legal Document Analysis</title>
        <style>
          body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 30px;
          }
          h1 {
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
            margin-bottom: 20px;
          }
          h2 {
            color: #444;
            margin-top: 25px;
          }
          .section {
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
            margin-bottom: 20px;
          }
          .footer {
            margin-top: 30px;
            font-size: 12px;
            color: #777;
            text-align: center;
            border-top: 1px solid #ddd;
            padding-top: 15px;
          }
        </style>
      </head>
      <body>
        <h1>Legal Document Analysis</h1>
        <p><strong>Document:</strong> ${file?.name || "Unnamed document"}</p>
        <p><strong>Analysis Date:</strong> ${new Date().toLocaleDateString()}</p>
        
        <h2>Summary</h2>
        <div class="section">
          ${analysis.summary || "No summary available"}
        </div>
        
        <h2>Plain-Language Explanation</h2>
        <div class="section">
          ${(analysis.final_analysis || "No analysis available").replace(
            /\n/g,
            "<br>"
          )}
        </div>
        
        <div class="footer">
          Generated on ${new Date().toLocaleString()}
        </div>
      </body>
      </html>
    `;

    // Write to the new window and print
    printWindow.document.open();
    printWindow.document.write(printContent);
    printWindow.document.close();

    // Wait for content to load before printing
    printWindow.onload = function () {
      printWindow.print();
      // printWindow.close(); // Uncomment if you want to automatically close after print dialog
    };
  };

  return (
    <div className="h-screen overflow-y-scroll bg-gray-50 p-6">
      <div className="max-w-6xl mx-auto">
        {/* Header */}
        {!analysis && (
          <div className="text-center mb-10">
            <h1 className="text-4xl font-bold text-gray-900 mb-4">
              Legal Document Analysis
            </h1>
            <p className="text-xl text-gray-600 max-w-2xl mx-auto">
              Upload your legal documents to get plain-language explanations and
              summaries
            </p>
          </div>
        )}

        {/* Main content */}
        <div className="grid grid-cols-1 lg:grid-cols-12 gap-8">
          {/* Upload Section */}
          <div className="lg:col-span-4">
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <FileText className="text-blue-600" /> Upload Document
              </h2>

              <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-500 transition-colors cursor-pointer">
                <input
                  type="file"
                  id="file-upload"
                  accept=".pdf,.txt,.docx"
                  onChange={handleFileChange}
                  className="hidden"
                />
                <label htmlFor="file-upload" className="cursor-pointer">
                  <Upload className="w-12 h-12 mx-auto text-gray-400" />
                  <p className="mt-2 text-gray-700 font-medium">
                    Drag and drop or click to upload
                  </p>
                  <p className="text-sm text-gray-500 mt-1">
                    Supports PDF, TXT and DOCX files
                  </p>
                </label>
              </div>

              {file && (
                <div className="mt-4 p-3 bg-blue-50 rounded-lg flex items-center">
                  <FileIcon className="text-blue-600 mr-2" />
                  <div className="overflow-hidden flex-1">
                    <p className="font-medium text-gray-900 truncate">
                      {file.name}
                    </p>
                    <p className="text-sm text-gray-500">
                      {formatFileSize(file.size)}
                    </p>
                  </div>
                  <button
                    onClick={() => {
                      setFile(null);
                      setShowModal(false);
                    }}
                    className="text-gray-500 hover:text-red-500"
                  >
                    <X size={18} />
                  </button>
                </div>
              )}

              <button
                onClick={() => file && setShowModal(true)}
                disabled={!file}
                className="mt-4 w-full bg-blue-600 text-white px-4 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed font-medium transition-colors"
              >
                Analyze Document
              </button>
            </div>
          </div>

          {/* Analysis Results */}
          <div className="lg:col-span-8">
            {analysis ? (
              <div
                className="bg-white rounded-xl shadow-lg p-6"
                ref={analysisRef}
              >
                <h2 className="text-2xl font-semibold mb-4 pb-2 border-b">
                  Document Analysis Results
                </h2>

                <div className="mb-6">
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Summary
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="text-gray-700">
                      {analysis.summary || "No summary available"}
                    </p>
                  </div>
                </div>

                <div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Plain-Language Explanation
                  </h3>
                  <div className="bg-gray-50 p-4 rounded-lg">
                    <p className="text-gray-700 whitespace-pre-line">
                      {analysis.final_analysis || "No analysis available"}
                    </p>
                  </div>
                </div>
              </div>
            ) : (
              <div className="bg-white rounded-xl shadow-lg p-10 flex flex-col items-center justify-center h-full text-center">
                <FileText className="w-16 h-16 text-gray-300 mb-4" />
                <h3 className="text-xl font-medium text-gray-700">
                  No Document Analyzed Yet
                </h3>
                <p className="text-gray-500 mt-2 max-w-sm">
                  Upload a legal document and click "Analyze Document" to see
                  results here
                </p>
              </div>
            )}
          </div>

          {/* Action Buttons */}
          <div className="lg:col-span-12 mt-4">
            <div className="flex flex-col sm:flex-row gap-4 justify-end">
              <Button
                variant="outline"
                className="h-12 border-gray-300 flex items-center gap-2"
                onClick={handlePrint}
                disabled={!analysis}
              >
                <Printer size={18} />
                Print Analysis
              </Button>

              <Button
                variant="outline"
                className="h-12 border-blue-500 text-blue-600 hover:bg-blue-50 flex items-center gap-2"
                onClick={handleDownload}
                disabled={!analysis}
              >
                <Download size={18} />
                Download as PDF
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Upload Modal */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-xl shadow-xl max-w-md w-full p-6 relative">
            <button
              onClick={() => !isUploading && setShowModal(false)}
              className="absolute top-4 right-4 text-gray-500 hover:text-gray-700"
              disabled={isUploading}
            >
              <X size={20} />
            </button>

            <div className="text-center mb-6">
              <h3 className="text-xl font-bold">Analyze Document</h3>
              <p className="text-gray-600 mt-1">
                {uploadStatus === "success"
                  ? "Analysis complete!"
                  : "Upload and analyze your legal document"}
              </p>
            </div>

            <div className="mb-6">
              <div className="bg-blue-50 rounded-lg p-4 flex items-center">
                <FileIcon className="text-blue-600 mr-3" />
                <div className="overflow-hidden flex-1">
                  <p className="font-medium text-gray-900 truncate">
                    {file?.name}
                  </p>
                  <p className="text-sm text-gray-500">
                    {file && formatFileSize(file.size)}
                  </p>
                </div>
              </div>
            </div>

            {uploadStatus === "success" ? (
              <div className="text-center p-4">
                <CheckCircle className="w-12 h-12 text-green-500 mx-auto" />
                <p className="mt-2 font-medium text-green-600">
                  Successfully analyzed!
                </p>
              </div>
            ) : uploadStatus === "error" ? (
              <div className="text-center p-4">
                <AlertCircle className="w-12 h-12 text-red-500 mx-auto" />
                <p className="mt-2 font-medium text-red-600">
                  Error analyzing document
                </p>
                <p className="text-sm text-gray-600 mt-1">
                  Please try again or use a different file
                </p>
              </div>
            ) : (
              <button
                onClick={analyzeDocument}
                disabled={isUploading}
                className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 disabled:bg-blue-400 font-medium flex items-center justify-center gap-2"
              >
                {isUploading ? (
                  <>
                    <div className="animate-spin rounded-full h-5 w-5 border-2 border-white border-t-transparent"></div>
                    <span>Analyzing...</span>
                  </>
                ) : (
                  <>
                    <Upload size={18} />
                    <span>Start Analysis</span>
                  </>
                )}
              </button>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default LegalDocumenbluealyzer;
