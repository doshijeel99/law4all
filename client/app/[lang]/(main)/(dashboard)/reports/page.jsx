// "use client";
// import React, { useState } from "react";

// import DemoReport from "@/components/Reports/DemoReport";
// import { FileText } from "lucide-react";

// const FinancialDashboard = () => {
//   const [isGeneratingReport, setIsGeneratingReport] = useState(false);
//   const [report, setReport] = useState(null);

//   const generateReport = async () => {
//     setIsGeneratingReport(true);

//     try {
//       const response = await axios.get(
//         "http://127.0.0.1:5000/portfolio_generation"
//       );
//       setReport(response?.data?.portfolio_data);
//     } catch (error) {
//       console.error("Error fetching report:", error);
//     } finally {
//       setIsGeneratingReport(false);
//     }
//   };

//   const formatText = (text) => {
//     if (!text) return null;
//     const parts = text.split(/(\*\*.*?\*\*|\*)/g).filter(Boolean);
//     return parts.map((part, index) => {
//       if (part.startsWith("**") && part.endsWith("**")) {
//         return (
//           <span key={index} className="font-bold">
//             {part.slice(2, -2)}
//           </span>
//         );
//       } else if (part === "*") {
//         return <br key={index} />;
//       } else {
//         return part;
//       }
//     });
//   };

//   return (
//     <div className="h-screen overflow-scroll bg-gray-100">
//       <div className="max-w-7xl mx-auto p-6 space-y-6">
//         {/* Header Section */}
//         <div className="mb-8 flex justify-between items-center">
//           <div>
//             <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-4">
//               Smart Reports Dashboard
//             </h1>
//             <p className="text-gray-600 dark:text-gray-400">
//               Key insights and recommendations for your portfolio
//             </p>
//           </div>

//           {/* Generate Report Button */}
//           <button
//             onClick={generateReport}
//             disabled={isGeneratingReport}
//             className="flex items-center gap-2 bg-primary-600 text-white px-4 py-2 rounded-md hover:bg-primary-700 disabled:bg-gray-400"
//           >
//             <FileText className="w-4 h-4" />
//             {isGeneratingReport ? "Generating Report..." : "Generate Report"}
//           </button>
//         </div>

//         <DemoReport />
//       </div>
//     </div>
//   );
// };

// export default FinancialDashboard;

"use client";
import React, { useState } from "react";
import { FileText, Upload } from "lucide-react";
import axios from "axios"; // Import axios

const LegalDocumentAnalyzer = () => {
  const [file, setFile] = useState(null);
  const [isUploading, setIsUploading] = useState(false);
  const [analysis, setAnalysis] = useState(null);

  // Handle file selection
  const handleFileChange = (event) => {
    setFile(event.target.files[0]);
  };

  // Upload and analyze file using Axios
  const analyzeDocument = async () => {
    if (!file) {
      alert("❌ Please select a PDF file first.");
      return;
    }

    setIsUploading(true);
    const formData = new FormData();
    formData.append("file", file);

    try {
      const response = await axios.post("http://127.0.0.1:8000/analyze", formData, {
        headers: {
          "Content-Type": "multipart/form-data",
        },
      });

      const data = response.data;
      console.log("API Response:", data); // Debugging step

      // Ensure final_analysis exists
      if (!data.final_analysis || data.final_analysis.trim() === "") {
        throw new Error("No output generated by API");
      }

      // Set the analysis state with the API response
      setAnalysis(data);
    } catch (error) {
      console.error("❌ Error:", error);
      alert(`⚠️ Failed to analyze the document. ${error.message}`);
    } finally {
      setIsUploading(false);
    }
  };

  return (
    <div className="h-screen flex flex-col items-center justify-center bg-gray-100 p-6">
      <h1 className="text-3xl font-bold text-gray-900 mb-6">
        Legal Document Analysis
      </h1>

      <div className="w-full max-w-lg p-6 bg-white rounded-md shadow-md">
        <input
          type="file"
          accept=".pdf,.txt"
          onChange={handleFileChange}
          className="block w-full border border-gray-300 rounded-md p-2"
        />

        <button
          onClick={analyzeDocument}
          disabled={isUploading}
          className="mt-4 w-full flex items-center justify-center gap-2 bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 disabled:bg-gray-400"
        >
          <Upload className="w-4 h-4" />
          {isUploading ? "Analyzing..." : "Analyze Document"}
        </button>
      </div>

      {analysis && (
        <div className="mt-8 w-full max-w-2xl p-6 bg-white rounded-md shadow-md">
          <h2 className="text-xl font-bold text-gray-900">Analysis Report</h2>
          <p className="mt-2 text-gray-600">
            <strong>Summary:</strong> {analysis.summary || "No summary available"}
          </p>
          <p className="mt-2 text-gray-600">
            <strong>Plain-Language Explanation:</strong>{" "}
            {analysis.final_analysis || "No analysis available"}
          </p>
        </div>
      )}
    </div>
  );
};

export default LegalDocumentAnalyzer;